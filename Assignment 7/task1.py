# -*- coding: utf-8 -*-
"""task1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1G9aC0Ah_lv5CUgLVM-Ve5Ew9V31pTtnV
"""

#NAME : MD HASIB ULLAH KHAN ALVIE
#SECTION : 23
#STUDENT ID : 22101371

def find_root(parent, i):
    if parent[i] == i:
        return i
    return find_root(parent, parent[i])

def union(parent, size, x, y):
    root_x = find_root(parent, x)
    root_y = find_root(parent, y)

    if root_x != root_y:
        if size[root_x] < size[root_y]:
            parent[root_x] = root_y
            size[root_y] += size[root_x]
        else:
            parent[root_y] = root_x
            size[root_x] += size[root_y]

def find_friend_circle_size(N, K, friendships):
    parent = [i for i in range(N + 1)]
    size = [1] * (N + 1)

    result = []

    for a, b in friendships:
        union(parent, size, a, b)
        result.append(size[find_root(parent, a)])

    return result

def main():
    with open("input1.txt", "r") as input_file:
        N, K = map(int, input_file.readline().split())
        friendships = [tuple(map(int, input_file.readline().split())) for _ in range(K)]

    friend_circle_sizes = find_friend_circle_size(N, K, friendships)

    with open("output1.txt", "w") as output_file:
        for size in friend_circle_sizes:
            output_file.write(str(size) + "\n")

if __name__ == "__main__":
    main()

