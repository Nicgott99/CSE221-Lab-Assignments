# -*- coding: utf-8 -*-
"""task1a.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fDP_ekHW8IG1HKpxPvqkxxd15AyKsMPB
"""

#Name: Md Hasib Ullah Khan Alvie
#Section: 23
#Student ID: 22101371

from numpy import full
file_in = open('input1a.txt','r')
file_out = open('output1a.txt','w')

vertices, edges = list(map(int,file_in.readline().split(' ')))
path = file_in.read().split('\n')
graph = {}
flag = False


def creating_graph(graph, path):
    for i in path:
        u, v = list(map(int, i.split(' ')))
        if u not in graph:
            graph[u] = [v]
        else:
            graph[u].append(v)


def topSortDFS(v, visited, stack, flag, temp_stack):
    temp_stack.append(v)
    visited[v] = True
    if v in graph:
        for i in graph[v]:
            if i in temp_stack:
                flag =True
            if visited[i] == False:
                flag = topSortDFS(i, visited, stack,flag, temp_stack)
    stack.append(v)
    temp_stack.remove(v)
    return flag


def topologicalSort(vertices, graph, flag):
    visited = full(vertices+1,False)
    stack = []
    for i in graph.keys():
        temp_stack = []
        if visited[i] == False:
            flag = topSortDFS(i, visited, stack,flag, temp_stack)
    return stack[::-1], flag


creating_graph(graph, path)
trav_list, cycle = topologicalSort(vertices, graph, flag)
file_out.write(' '.join(map(str, trav_list)) if cycle is False else 'IMPOSSIBLE')
file_out.close()